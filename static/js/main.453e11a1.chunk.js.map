{"version":3,"sources":["components/NoWalletDetected.jsx","components/NetworkErrorMessage.jsx","components/ConnectWallet.jsx","components/GenericButton.jsx","Constants.js","Utils.js","components/BlockchainMessagesTable.jsx","components/App.jsx","index.js"],"names":["NoWalletDetected","className","href","target","rel","NetworkErrorMessage","message","dismiss","role","type","onClick","ConnectWallet","connectWallet","networkError","GenericButton","props","Box","display","justifyContent","m","Button","variant","color","size","label","TUSD","WBTC","require","config","Utils","swapAI","address","this","a","console","log","createUser","toString","tx","wait","txwait","queryFilter","filters","CreateUser","filterValues","createUserStatus","undefined","length","ethers","utils","defaultAbiCoder","decode","data","userAddress","fetchUserBalance","UserBalance","userBalanceResult","balanceMap","div","BigNumber","from","pow","toAddress","coinNameToDeposit","decimals","depositTUSD","transferResult","depositWBTC","DepositTUSD","DepositWBTC","userDepositResult","depositMap","useStyles","makeStyles","table","minWidth","BlockchainMessagesTable","classes","blockchainMessages","TableContainer","component","Paper","Table","TableHead","TableRow","TableCell","TableBody","map","scope","Math","random","App","initialState","selectedAddress","transactionError","optInStatus","state","provider","providers","Web3Provider","window","ethereum","networkVersion","Contract","contractAddress","SwapAI","SwapAIArtifact","abi","getSigner","setState","intializeEthers","enable","checkNetwork","initialize","on","newAddress","resetState","prevState","optInToggle","newOptInStatus","getUserBalance","userBalanceResultMap","tusdBalance","wbtcBalance","addDeposit","addDepositResultMap","oldBalance","newBalance","coinSwapFrom","coinSwapTo","swapSingleUserBalance","dismissNetworkError","style","position","left","top","transform","Grid","container","direction","justify","alignItems","updateCreateUser","updateGetUserBalance","updateAddDeposit","updateSwapDeposit","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.453e11a1.chunk.js","sourcesContent":["import React from \"react\";\n\nexport function NoWalletDetected() {\n  return (\n    <div className=\"container\">\n      <div className=\"row justify-content-md-center\">\n        <div className=\"col-6 p-4 text-center\">\n          <p>\n            No Ethereum wallet was detected. <br />\n            Please install{\" \"}\n            <a\n              href=\"http://metamask.io\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              MetaMask\n            </a>\n            .\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}\n","/* eslint-disable react/prop-types */\nimport React from \"react\";\n\nexport function NetworkErrorMessage({ message, dismiss }) {\n  return (\n    <div className=\"alert alert-danger\" role=\"alert\">\n      {message}\n      <button\n        type=\"button\"\n        className=\"close\"\n        data-dismiss=\"alert\"\n        aria-label=\"Close\"\n        onClick={dismiss}\n      >\n        <span aria-hidden=\"true\">&times;</span>\n      </button>\n    </div>\n  );\n}\n","/* eslint-disable react/prop-types */\nimport React from \"react\";\n\nimport { NetworkErrorMessage } from \"./NetworkErrorMessage\";\n\nexport function ConnectWallet({ connectWallet, networkError, dismiss }) {\n  return (\n    <div className=\"container\">\n      <div className=\"row justify-content-md-center\">\n        <div className=\"col-12 text-center\">\n          {networkError && (\n            <NetworkErrorMessage \n              message={networkError} \n              dismiss={dismiss} \n            />\n          )}\n        </div>\n        <div className=\"col-6 p-4 text-center\">\n          <p>Please connect to your wallet.</p>\n          <button\n            className=\"btn btn-warning\"\n            type=\"button\"\n            onClick={connectWallet}\n          >\n            Connect Wallet\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport PropTypes from 'prop-types';\nimport Box from '@material-ui/core/Box';\n\nconst GenericButton = (props) => {\n  return (\n    <Box display=\"flex\" justifyContent=\"space-between\" m={1}>\n      <Button variant=\"contained\" color=\"primary\" size=\"medium\" onClick={props.onClick}>\n        {props.label}\n      </Button>\n    </Box>\n  );\n}\n\nGenericButton.propTypes = {\n  onClick: PropTypes.func,\n  label: PropTypes.string\n}\n\nexport default GenericButton;\n","const TUSD = \"TUSD\";\nconst WBTC = \"WBTC\";\n\nexport {\n  TUSD, WBTC\n}\n","import { ethers } from \"ethers\";\nimport Web3 from \"web3\";\nimport { TUSD, WBTC } from \"./Constants\";\nrequire(\"dotenv\").config();\n\nclass Utils {\n  constructor(swapAI, address) {\n    this.swapAI = swapAI;\n  }\n\n  async createUser() {\n    try {\n      console.log(\"this.swapAI.createUser\", this.swapAI.createUser.toString());\n      let tx = await this.swapAI.createUser();\n      let txwait = await tx.wait();\n      console.log(\"createUser response!\", txwait);\n\n      let filterValues = await this.swapAI.queryFilter(\n        this.swapAI.filters.CreateUser()\n      );\n      let createUserStatus =\n        filterValues === undefined || filterValues.length === 0\n          ? false\n          : ethers.utils.defaultAbiCoder.decode(\n              [\"bool\"],\n              filterValues[filterValues.length - 1].data\n            );\n      console.log(\"createUserStatus from chain\", createUserStatus);\n      return createUserStatus;\n    } catch (e) {\n      console.log(\"createUser exception\", e);\n      return \"Error\";\n    }\n  }\n\n  async getUserBalance(userAddress) {\n    try {\n      let tx = await this.swapAI.fetchUserBalance();\n      let txwait = await tx.wait();\n      console.log(\"getUserBalance response!\", txwait);\n\n      let filterValues = await this.swapAI.queryFilter(\n        this.swapAI.filters.UserBalance()\n      );\n\n      let userBalanceResult =\n        filterValues === undefined || filterValues.length === 0\n          ? [-1, -1]\n          : ethers.utils.defaultAbiCoder.decode(\n              [\"uint\", \"uint\"],\n              filterValues[filterValues.length - 1].data\n            );\n      let balanceMap = {};\n      balanceMap[TUSD] = userBalanceResult[0]\n        .div(ethers.BigNumber.from(\"10\").pow(18))\n        .toString();\n      balanceMap[WBTC] = userBalanceResult[1]\n        .div(ethers.BigNumber.from(\"10\").pow(8))\n        .toString();\n      return balanceMap;\n    } catch (e) {\n      console.log(\"createUser exception\", e);\n      return \"Error\";\n    }\n  }\n\n  async addDeposit(toAddress, coinNameToDeposit) {\n    let tokenAmt;\n    let decimals;\n    let transferResult\n    if (coinNameToDeposit === TUSD) {\n      decimals = 18;\n      transferResult = await this.swapAI.depositTUSD();\n    } else if (coinNameToDeposit === WBTC) {\n      decimals = 8;\n      transferResult = await this.swapAI.depositWBTC();\n    }\n    console.log(\"addDeposit response!\", transferResult);\n    let filterValues;\n    if (coinNameToDeposit === TUSD) {\n      filterValues = await this.swapAI.queryFilter(\n        this.swapAI.filters.DepositTUSD()\n      );\n    } else if (coinNameToDeposit === WBTC) {\n      filterValues = await this.swapAI.queryFilter(\n        this.swapAI.filters.DepositWBTC()\n      );\n    }\n    let userDepositResult =\n      filterValues === undefined || filterValues.length === 0\n        ? [-1, -1]\n        : ethers.utils.defaultAbiCoder.decode(\n            [\"uint\", \"uint\"],\n            filterValues[filterValues.length - 1].data\n          );\n    let depositMap = {};\n    depositMap[\"oldBalance\"] = userDepositResult[0]\n      .div(ethers.BigNumber.from(\"10\").pow(decimals))\n      .toString();\n    depositMap[\"newBalance\"] = userDepositResult[1]\n      .div(ethers.BigNumber.from(\"10\").pow(decimals))\n      .toString();\n    return depositMap;\n  }\n\n  async updateSwapSingleUserBalance() {\n    // TODO: figure out if need to \"initialize\" OracleCaller contract like SwapAI in order to extract event data, have asked in Chainlink Discord\n  }\n}\n\nexport default Utils;\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport PropTypes from 'prop-types';\n\nconst useStyles = makeStyles({\n  table: {\n    minWidth: 200,\n  },\n});\n\nexport default function BlockchainMessagesTable(props) {\n  const classes = useStyles();\n\n  if (props.blockchainMessages !== undefined && props.blockchainMessages.length > 0){\n    return (\n      <TableContainer component={Paper}>\n        <Table className={classes.table} aria-label=\"simple table\">\n          <TableHead>\n            <TableRow>\n              <TableCell>Blockchain Logs</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {props.blockchainMessages.map((message) => (\n              <TableRow key={message+Math.random()}>\n                <TableCell component=\"th\" scope=\"row\">{message}</TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    );\n  }\n  return (<div></div>);\n}\n\nBlockchainMessagesTable.propTypes = {\n  blockchainMessages: PropTypes.array\n}\n","import React from \"react\";\n\nimport { ethers } from \"ethers\";\n\n// import MockSwapAIArtifact from \"../contracts/MockSwapAISwap.json\";\n// import mockContractAddress from \"../contracts/mock-contract-address.json\";\n\nimport { NoWalletDetected } from \"./NoWalletDetected\";\nimport { ConnectWallet } from \"./ConnectWallet\";\n\nimport Grid from \"@material-ui/core/Grid\";\nimport GenericButton from \"./GenericButton\";\n\nimport { TUSD, WBTC } from \"../Constants\";\nimport Utils from \"../Utils\";\nimport BlockchainMessagesTable from \"./BlockchainMessagesTable\";\n\nimport SwapAIArtifact from \"../contracts/SwapAI.json\";\nimport contractAddress from \"../contracts/contract-address.json\";\n\n// list of network ids https://docs.metamask.io/guide/ethereum-provider.html#properties\nconst KOVAN_ID = \"42\";\nconst NETWORK_ERR_MSG = \"Please connect Metamask to Kovan\";\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.initialState = {\n      selectedAddress: undefined,\n      transactionError: undefined,\n      networkError: undefined,\n      optInStatus: false,\n      blockchainMessages: [],\n      utils: undefined,\n    };\n\n    this.state = this.initialState;\n  }\n\n  async intializeEthers() {\n    // We first initialize ethers by creating a provider using window.ethereum\n    this.provider = new ethers.providers.Web3Provider(window.ethereum);\n    // TODO: uncomment once created mock contract\n    // if (window.ethereum.networkVersion === HARDHAT_NETWORK_ID) {\n    //   this.swapAI = new ethers.Contract(\n    //     mockContractAddress.MockSwapAI,\n    //     MockSwapAIArtifact.abi,\n    //     this.provider.getSigner(0)\n    //   );\n    // }\n    if (window.ethereum.networkVersion === KOVAN_ID) {\n      // TODO: uncomment once added contract abi to this repo\n      this.swapAI = new ethers.Contract(\n        contractAddress.SwapAI,\n        SwapAIArtifact.abi,\n        this.provider.getSigner(0)\n      );\n      console.log(\"SwapAI Kovan address\", contractAddress);\n    }\n    console.log(\"networkVersion\", window.ethereum.networkVersion);\n    this.setState({\n      utils: new Utils(this.swapAI, this.provider, this.state.selectedAddress),\n    });\n  }\n\n  dismissNetworkError() {\n    this.setState({ networkError: undefined });\n  }\n\n  async initialize(userAddress) {\n    // This method initializes the dapp\n\n    // We first store the user's address in the component's state\n    this.setState({\n      selectedAddress: userAddress,\n    });\n\n    // Then, we initialize ethers\n    await this.intializeEthers();\n  }\n\n  async connectWallet() {\n    //connects dapp to wallet when user clicks on connect wallet button\n\n    const [selectedAddress] = await window.ethereum.enable();\n    console.log(\"selectedAddress\", selectedAddress);\n    // Once we have the address, we can initialize the application.\n\n    if (!this.checkNetwork()) {\n      return;\n    }\n\n    this.initialize(selectedAddress);\n\n    // We reinitialize it whenever the user changes their account.\n    window.ethereum.on(\"accountsChanged\", ([newAddress]) => {\n      // `accountsChanged` event can be triggered with an undefined newAddress.\n      // This happens when the user removes the Dapp from the \"Connected\n      // list of sites allowed access to your addresses\" (Metamask > Settings > Connections)\n      // To avoid errors, we reset the dapp state\n      if (newAddress === undefined) {\n        return this.resetState();\n      }\n\n      this.initialize(newAddress);\n    });\n\n    // We reset the dapp state if the network is changed\n    window.ethereum.on(\"networkChanged\", () => {\n      this.resetState();\n    });\n  }\n\n  // This method resets the state\n  resetState() {\n    this.setState(this.initialState);\n  }\n\n  // This method checks if Metamask selected network is Localhost:8545, mainnet, or Kovan\n  checkNetwork() {\n    if (window.ethereum.networkVersion === KOVAN_ID) {\n      return true;\n    }\n\n    this.setState({\n      networkError: NETWORK_ERR_MSG,\n    });\n\n    return false;\n  }\n\n  async updateCreateUser() {\n    let createUserStatus = await this.state.utils.createUser();\n    console.log(\n      \"updateCreateUser this.state.createUserStatus\",\n      this.state.createUserStatus\n    );\n    this.setState((prevState) => ({\n      blockchainMessages: [\n        ...prevState.blockchainMessages,\n        `User registration status: ${createUserStatus}`,\n      ],\n    }));\n  }\n\n  async updateOptInToggle() {\n    let newOptInStatus = await this.state.utils.optInToggle();\n    this.setState({ optInStatus: newOptInStatus }, () => {\n      console.log(\n        \"updateOptInToggle this.state.optInStatus\",\n        this.state.optInStatus\n      );\n      this.setState((prevState) => ({\n        blockchainMessages: [\n          ...prevState.blockchainMessages,\n          `User opt-in status for auto-swapping TUSD <-> WBTC: ${this.state.optInStatus}`,\n        ],\n      }));\n    });\n  }\n\n  async updateGetUserBalance() {\n    let userBalanceResultMap = await this.state.utils.getUserBalance(\n      this.state.selectedAddress\n    );\n    let tusdBalance = userBalanceResultMap[TUSD];\n    let wbtcBalance = userBalanceResultMap[WBTC];\n    this.setState((prevState) => ({\n      blockchainMessages: [\n        ...prevState.blockchainMessages,\n        `${TUSD} balance: ${tusdBalance}, ${WBTC}: ${wbtcBalance}`,\n      ],\n    }));\n  }\n\n  async updateAddDeposit(coinNameToDeposit) {\n    let addDepositResultMap = await this.state.utils.addDeposit(\n      contractAddress.SwapAI,\n      coinNameToDeposit\n    );\n    let oldBalance = addDepositResultMap[\"oldBalance\"];\n    let newBalance = addDepositResultMap[\"newBalance\"];\n    this.setState((prevState) => ({\n      blockchainMessages: [\n        ...prevState.blockchainMessages,\n        `${coinNameToDeposit}: ${oldBalance} -> ${newBalance} balance`,\n      ],\n    }));\n  }\n\n  async updateSwapSingleUserBalance(coinSwapFrom, coinSwapTo) {\n    // TODO: extract data from swapSingleUserBalanceSummary here + update state & log\n    let swapSingleUserBalanceResult =\n      await this.state.utils.swapSingleUserBalance(coinSwapFrom, coinSwapTo);\n  }\n\n  render() {\n    // Ethereum wallets inject the window.ethereum object. If it hasn't been\n    // injected, we instruct the user to install MetaMask.\n    if (window.ethereum === undefined) {\n      return <NoWalletDetected />;\n    }\n\n    if (!this.state.selectedAddress) {\n      return (\n        <ConnectWallet\n          connectWallet={() => this.connectWallet()}\n          networkError={this.state.networkError}\n          dismiss={() => this.dismissNetworkError()}\n        />\n      );\n    }\n\n    let optInStatusLabel = this.state.optInStatus ? \"Out of\" : \"In to\";\n\n    return (\n      <div\n        style={{\n          position: \"absolute\",\n          left: \"50%\",\n          top: \"50%\",\n          transform: \"translate(-50%, -50%)\",\n          display: \"inline-block\",\n        }}\n      >\n        <Grid container direction=\"row\" justify=\"center\" alignItems=\"center\">\n          <GenericButton\n            onClick={() => this.updateCreateUser()}\n            label=\"Register Account\"\n          />\n          {/* <GenericButton\n            onClick={() => this.updateOptInToggle()}\n            label={`Opt ${optInStatusLabel} automatic swapping`}\n          /> */}\n          <GenericButton\n            onClick={() => this.updateGetUserBalance()}\n            label=\"Refresh Balance\"\n          />\n          <GenericButton\n            onClick={() => this.updateAddDeposit(TUSD)}\n            label=\"Deposit TUSD\"\n          />\n          <GenericButton\n            onClick={() => this.updateAddDeposit(WBTC)}\n            label=\"Deposit WBTC\"\n          />\n          <GenericButton\n            onClick={() => this.updateSwapDeposit(TUSD, WBTC)}\n            label=\"Force Swap TUSD -> WBTC\"\n          />\n          <GenericButton\n            onClick={() => this.updateSwapDeposit(WBTC, TUSD)}\n            label=\"Force Swap TUSD -> WBTC\"\n          />\n        </Grid>\n        <Grid container direction=\"row\" justify=\"center\" alignItems=\"center\">\n          <BlockchainMessagesTable\n            blockchainMessages={this.state.blockchainMessages}\n          />\n        </Grid>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App.jsx';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}
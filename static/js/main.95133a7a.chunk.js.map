{"version":3,"sources":["components/PriceFeedChart.jsx","components/GenericButton.jsx","components/NoWalletDetected.jsx","components/NetworkErrorMessage.jsx","components/ConnectWallet.jsx","components/BlockchainLogsTable.jsx","utils/constants.js","utils/utils.js","utils/swapai-contract.js","utils/ChainlinkPriceFeedAPI.js","components/App.jsx","index.js"],"names":["PriceFeedChart","props","dataSeries","name","data","id","options","chart","foreColor","animations","enabled","toolbar","show","autoSelected","colors","grid","borderColor","stroke","width","curve","tooltip","shared","x","format","y","title","text","align","style","fontSize","dataLabels","yaxis","labels","formatter","value","toFixed","xaxis","type","datetimeUTC","axisBorder","color","axisTicks","legend","series","height","React","memo","GenericButton","colorStyle","backgroundColor","disabled","Box","display","justifyContent","m","Button","variant","size","onClick","sx","label","NoWalletDetected","className","href","target","rel","NetworkErrorMessage","message","dismiss","role","ConnectWallet","connectWallet","networkError","position","left","top","transform","BlockchainLogsTable","undefined","logs","TableContainer","component","Paper","Table","TableHead","TableRow","TableCell","TableBody","map","scope","whiteSpace","Math","random","MAX_GAS_LIMIT","TUSD_KOVAN_ADDRESS","contractData","WBTC_KOVAN_ADDRESS","CONTRACT_ADDRESS","ERC20_TOKEN_ABI","SWAPAI_ABI","SwapAIArtifact","abi","waitForEvent","contract","filter","a","Promise","resolve","reject","once","args","BigNum","ethers","BigNumber","SwapAIContract","provider","this","tusdToken","Contract","getSigner","wbtcToken","swapAI","wbtcFactor","from","pow","tusdFactor","rawValue","decimals","formattedValue","utils","formatUnits","commify","userExists","gasLimit","_waitEvent","filters","UserExists","registerUser","RegisterUser","success","isNewUser","fetchUserBalance","UserBalance","tusdBalance","wbtcBalance","_formatCurrency","fetchOptInStatus","OptInStatus","optInStatus","wantedOptInStatus","setOptInStatus","newOptInStatus","depositAmount","_tusdFactor","realAmount","mul","approve","depositTUSD","DepositTUSD","oldBalance","newBalance","_wbtcFactor","depositWBTC","DepositWBTC","manualSwapUserToWBTC","ManualSwap","oldWbtcBalance","newWbtcBalance","oldTusdBalance","newTusdBalance","WBTC","old","new","TUSD","manualSwapUserToTUSD","min","max","ceil","floor","fetchPredictionForecast","PredictionResults","btcPriceCurrent","btcPricePrediction","tusdAssets","tusdReserves","btcSentiment","isNegativeFuture","isPositiveFuture","ChainlinkPriceFeedAPI","contractAddress","address","api","axios","create","baseURL","headers","accept","range","end","Date","now","start","_fetchHistoricPrices","get","params","query","step","res","dataResponse","rawData","result","values","processedData","NETWORK_ERR_MSG","App","useState","walletAddress","setWalletAddress","setNetworkError","userRegistered","setUserRegistered","setLogs","swapperContract","setSwapperContract","priceFeedData","setPriceFeedData","window","ethereum","request","method","userAddress","networkVersion","providers","Web3Provider","on","newAddress","resetState","join","userOptedIn","useEffect","priceFeedAPI","fetchData","fetchHistoricPrices","optInStatusLabel","flexGrow","Grid","container","spacing","padding","item","xs","pb","Typography","Stack","direction","executeRegisterUser","executeSetOptInStatus","executeDepositTUSD","executeDepositWBTC","executeFetchUserBalance","executeManualSwapUserToWBTC","executeManualSwapUserToTUSD","executeFetchPredictionForecast","maxHeight","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.95133a7a.chunk.js","sourcesContent":["import React from 'react';\n\nimport Chart from 'react-apexcharts';\n\nfunction PriceFeedChart(props) {\n  const dataSeries = [{\n    name: 'BTC Price',\n    data: props.data\n  }];\n\n  const mainChartOpts = {\n    chart: {\n      foreColor: '#000000a6',\n      animations: { enabled: false },\n      toolbar: {\n        show: false,\n        autoSelected: 'pan'\n      }\n    },\n    colors: [\n      '#343ac8', '#4645d6', '#5750e3', '#665cf1',\n      '#7568ff', '#8474ff', '#9280ff', '#a18cff',\n      '#af99ff', '#bea5ff', '#ccb2ff', '#dbbfff',\n      '#e9ccff', '#f8daff'\n    ],\n    grid: { borderColor: '#e9e9e9' },\n    stroke: { width: 3, curve: 'smooth' },\n    tooltip: {\n      shared: false,\n      x: {\n        show: true,\n        format: 'dd MMM yyyy hh:mm TT'\n      },\n      y: {\n        title: {}\n      }\n    },\n    title: {\n      text: 'BTC / USD',\n      align: 'left',\n      style: {\n        fontSize: '28px',\n      },\n    },\n    dataLabels: {\n      enabled: false\n    },\n    yaxis: {\n      labels: {\n        formatter: value => '$' + value.toFixed(2)\n      },\n    },\n    xaxis: {\n      type: 'datetime',\n      labels: { datetimeUTC: false },\n      axisBorder: { color: '#e9e9e9' },\n      axisTicks: { color: '#e9e9e9' }\n    },\n    legend: { show: false }\n  }\n\n  return (\n    <div id=\"chart\">\n      <Chart options={mainChartOpts} series={dataSeries} type=\"area\" height={props.height} />\n    </div>\n  );\n}\n\nexport default React.memo(PriceFeedChart);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Button from '@mui/material/Button';\nimport Box from '@mui/material/Box';\n\nfunction GenericButton(props) {\n  const colorStyle = {\n    backgroundColor: (props.disabled) ? '#D3D3D3' : '#12824C',\n    color: '#FFFFFF'\n  }\n\n  return (\n    <Box display='flex' justifyContent='space-between' m={1}>\n      <Button\n        variant='contained'\n        size='medium'\n        style={colorStyle}\n        onClick={props.onClick}\n        disabled={props.disabled}\n        sx={props.sx}\n      >\n        {props.label}\n      </Button>\n    </Box>\n  );\n}\n\nGenericButton.propTypes = {\n  onClick: PropTypes.func.isRequired,\n  label: PropTypes.string.isRequired,\n  disabled: PropTypes.bool,\n};\n\nexport default React.memo(GenericButton);\n","import React from 'react';\n\nfunction NoWalletDetected() {\n  return (\n    <div className='container'>\n      <div className='row justify-content-md-center'>\n        <div className='col-6 p-4 text-center'>\n          <p>\n            No Ethereum wallet was detected. <br />\n            Please install{' '}\n            <a\n              href='http://metamask.io'\n              target='_blank'\n              rel='noopener noreferrer'\n            >\n              MetaMask\n            </a>\n            .\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default React.memo(NoWalletDetected);\n","/* eslint-disable react/prop-types */\nimport React from 'react';\n\nfunction NetworkErrorMessage({ message, dismiss }) {\n  return (\n    <div className='alert alert-danger' role='alert'>\n      {message}\n      <button\n        type='button'\n        className='close'\n        data-dismiss='alert'\n        aria-label='Close'\n        onClick={dismiss}\n      >\n        <span aria-hidden='true'>&times;</span>\n      </button>\n    </div>\n  );\n}\n\nexport default React.memo(NetworkErrorMessage);\n","/* eslint-disable react/prop-types */\nimport React from 'react';\n\nimport NetworkErrorMessage from './NetworkErrorMessage';\nimport GenericButton from './GenericButton';\n\nfunction ConnectWallet({ connectWallet, networkError, dismiss }) {\n  return (\n    <div className='container'\n      style={{\n        position: 'absolute',\n        left: '50%',\n        top: '50%',\n        transform: 'translate(-50%, -50%)',\n        display: 'inline-block',\n      }}\n    >\n      <div className='row justify-content-md-center'>\n        <div className='col-12 text-center'>\n          {networkError && (\n            <NetworkErrorMessage \n              message={networkError} \n              dismiss={dismiss} \n            />\n          )}\n        </div>\n        <div className='col-6 p-4 text-center'>\n          <p>Please connect to your wallet.</p>\n          <GenericButton\n            className='btn btn-warning'\n            type='button'\n            onClick={connectWallet}\n            label='Connect Wallet'\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default React.memo(ConnectWallet);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableHead from '@mui/material/TableHead';\nimport TableRow from '@mui/material/TableRow';\nimport Paper from '@mui/material/Paper';\n\nfunction BlockchainLogsTable(props) {\n  if (props.logs === undefined)\n    props.logs = [];\n\n  return (\n    <TableContainer component={Paper}>\n      <Table aria-label='simple table'>\n        <TableHead>\n          <TableRow>\n            <TableCell>Blockchain Logs</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {props.logs.map((message) => (\n            <TableRow key={message+Math.random()}>\n              <TableCell component='th' scope='row' sx={{whiteSpace: 'pre'}}>\n                {message}\n              </TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n}\n\nBlockchainLogsTable.propTypes = {\n  logs: PropTypes.array\n}\n\nexport default React.memo(BlockchainLogsTable);\n","import contractData from '../contracts/contract-addresses.json';\nimport SwapAIArtifact from '../contracts/SwapAI.json';\n\nconst MAX_GAS_LIMIT = 250_000;\n\nconst TUSD_KOVAN_ADDRESS = contractData['TUSDToken'];\nconst WBTC_KOVAN_ADDRESS = contractData['WBTCToken'];\nconst CONTRACT_ADDRESS   = contractData['SwapAI'];\n\nconst ERC20_TOKEN_ABI = [\n  'function approve(address spender, uint256 amount) external returns (bool)',\n  'function decimals() public returns (uint8)',\n];\n\nconst SWAPAI_ABI = SwapAIArtifact.abi;\n\nconst PRICE_FEED_BTC_ADDRESS = '0xAe74faA92cB67A95ebCAB07358bC222e33A34dA7';\nconst BTC_DECIMALS = 8;\n\nexport {\n  MAX_GAS_LIMIT,\n  TUSD_KOVAN_ADDRESS, WBTC_KOVAN_ADDRESS, CONTRACT_ADDRESS,\n  ERC20_TOKEN_ABI, SWAPAI_ABI,\n  PRICE_FEED_BTC_ADDRESS, BTC_DECIMALS\n}\n","async function waitForEvent(contract, filter) {\n  return new Promise((resolve, reject) => {\n    contract.once(filter, function(...args) {\n      resolve(args);\n    });\n  });\n}\n\nexport { waitForEvent };\n","import { ethers } from 'ethers';\nimport {\n  MAX_GAS_LIMIT,\n  TUSD_KOVAN_ADDRESS,\n  WBTC_KOVAN_ADDRESS,\n  CONTRACT_ADDRESS,\n  ERC20_TOKEN_ABI,\n  SWAPAI_ABI,\n} from './constants';\n\nimport { waitForEvent } from './utils';\n\nconst BigNum = ethers.BigNumber;\n\nclass SwapAIContract {\n  constructor(provider) {\n    this.provider = provider;\n\n    this.tusdToken = new ethers.Contract(\n      TUSD_KOVAN_ADDRESS,\n      ERC20_TOKEN_ABI,\n      provider.getSigner(0),\n    );\n\n\n    this.wbtcToken = new ethers.Contract(\n      WBTC_KOVAN_ADDRESS,\n      ERC20_TOKEN_ABI,\n      provider.getSigner(0),\n    );\n\n    this.swapAI = new ethers.Contract(\n      CONTRACT_ADDRESS,\n      SWAPAI_ABI,\n      provider.getSigner(0),\n    );\n\n    this.swapAI = new ethers.Contract(\n      CONTRACT_ADDRESS,\n      SWAPAI_ABI,\n      provider.getSigner(0),\n    );\n  }\n\n  async _waitEvent(filter) {\n    return await waitForEvent(this.swapAI, filter);\n  }\n\n  async _wbtcFactor() {\n    // TODO: Fetch decimals dynamically somehow\n    const wbtcDecimals = 8; //await this.wbtcToken.decimals();\n    const wbtcFactor = BigNum.from(10).pow(BigNum.from(wbtcDecimals));\n    return wbtcFactor;\n  }\n\n  async _tusdFactor() {\n    // TODO: Fetch decimals dynamically somehow\n    const tusdDecimals = 18; //await this.tusdToken.decimals();\n    const tusdFactor = BigNum.from(10).pow(BigNum.from(tusdDecimals));\n    return tusdFactor;\n  }\n\n  _formatCurrency(rawValue, decimals) {\n    const formattedValue = ethers.utils.formatUnits(rawValue, decimals);\n    const prettyValue = ethers.utils.commify(formattedValue);\n    return prettyValue;\n  }\n\n  ///////////////////////////\n  // User register / login //\n  ///////////////////////////\n\n  async userExists() {\n    await this.swapAI.userExists({ gasLimit: MAX_GAS_LIMIT });\n    const [userExists] = await this._waitEvent(this.swapAI.filters.UserExists());\n\n    return userExists;\n  }\n\n  async registerUser() {\n    await this.swapAI.registerUser({ gasLimit: MAX_GAS_LIMIT });\n    const [success, isNewUser] = await this._waitEvent(this.swapAI.filters.RegisterUser());\n\n    return { success, isNewUser };\n  }\n\n  /////////////////////\n  // User attributes //\n  /////////////////////\n\n  async fetchUserBalance() {\n    await this.swapAI.fetchUserBalance({ gasLimit: MAX_GAS_LIMIT });\n    const [tusdBalance, wbtcBalance] = await this._waitEvent(this.swapAI.filters.UserBalance());\n\n    return {\n      'WBTC': this._formatCurrency(BigNum.from(wbtcBalance), 8),\n      'TUSD': this._formatCurrency(BigNum.from(tusdBalance), 18),\n    };\n  }\n\n  async fetchOptInStatus() {\n    await this.swapAI.fetchOptInStatus({ gasLimit: MAX_GAS_LIMIT });\n    const [optInStatus] = await this._waitEvent(this.swapAI.filters.OptInStatus());\n\n    return optInStatus;\n  }\n\n  /////////////////////\n  // User management //\n  /////////////////////\n\n  async setOptInStatus(wantedOptInStatus) {\n    await this.swapAI.setOptInStatus(wantedOptInStatus, { gasLimit: MAX_GAS_LIMIT });\n    const [newOptInStatus] = await this._waitEvent(this.swapAI.filters.OptInStatus());\n\n    return newOptInStatus;\n  }\n\n  ////////////////////////\n  // Balance depositing //\n  ////////////////////////\n\n  async depositTUSD(depositAmount) {\n    // First approve the contract to spend the TUSD on your behalf\n    const realAmount = BigNum.from(depositAmount).mul(await this._tusdFactor());\n    await this.tusdToken.approve(CONTRACT_ADDRESS, realAmount);\n\n    // Then deposit that much TUSD into the contract\n    await this.swapAI.depositTUSD(realAmount, { gasLimit: MAX_GAS_LIMIT });\n    const [oldBalance, newBalance] = await this._waitEvent(this.swapAI.filters.DepositTUSD());\n\n    return {\n      oldBalance: this._formatCurrency(BigNum.from(oldBalance), 18),\n      newBalance: this._formatCurrency(BigNum.from(newBalance), 18),\n    };\n  }\n\n  async depositWBTC(depositAmount) {\n    // First approve the contract to spend the WBTC on your behalf\n    const realAmount = BigNum.from(depositAmount).mul(await this._wbtcFactor());\n    await this.wbtcToken.approve(CONTRACT_ADDRESS, realAmount);\n\n    // Then deposit that much WBTC into the contract\n    await this.swapAI.depositWBTC(realAmount, { gasLimit: MAX_GAS_LIMIT });\n    const [oldBalance, newBalance] = await this._waitEvent(this.swapAI.filters.DepositWBTC());\n\n    return {\n      oldBalance: this._formatCurrency(BigNum.from(oldBalance), 8),\n      newBalance: this._formatCurrency(BigNum.from(newBalance), 8),\n    };\n  }\n\n  /////////////////////////////\n  // Manual balance swapping //\n  /////////////////////////////\n\n  async manualSwapUserToWBTC() {\n    await this.swapAI.manualSwapUserToWBTC({ gasLimit: MAX_GAS_LIMIT * 10 });\n\n    const [\n      oldWbtcBalance, newWbtcBalance,\n      oldTusdBalance, newTusdBalance,\n    ] = await this._waitEvent(this.swapAI.filters.ManualSwap());\n\n    return {\n      WBTC: {\n        old: this._formatCurrency(BigNum.from(oldWbtcBalance), 8),\n        new: this._formatCurrency(BigNum.from(newWbtcBalance), 8),\n      },\n      TUSD: {\n        old: this._formatCurrency(BigNum.from(oldTusdBalance), 18),\n        new: this._formatCurrency(BigNum.from(newTusdBalance), 18),\n      },\n    }\n  }\n\n  async manualSwapUserToTUSD() {\n    await this.swapAI.manualSwapUserToTUSD({ gasLimit: MAX_GAS_LIMIT * 10 });\n\n    const [\n      oldWbtcBalance, newWbtcBalance,\n      oldTusdBalance, newTusdBalance,\n    ] = await this._waitEvent(this.swapAI.filters.ManualSwap());\n\n    return {\n      WBTC: {\n        old: this._formatCurrency(BigNum.from(oldWbtcBalance), 8),\n        new: this._formatCurrency(BigNum.from(newWbtcBalance), 8),\n      },\n      TUSD: {\n        old: this._formatCurrency(BigNum.from(oldTusdBalance), 18),\n        new: this._formatCurrency(BigNum.from(newTusdBalance), 18),\n      },\n    }\n  }\n\n  ////////////////////////////\n  // Prediction forecasting //\n  ////////////////////////////\n\n  getRandomInt(min, max) {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n  }\n\n  async fetchPredictionForecast() {\n    await this.swapAI.fetchPredictionForecast({ gasLimit: MAX_GAS_LIMIT * 10 });\n\n    const [\n      btcPriceCurrent,\n      btcPricePrediction,\n      tusdAssets,\n      tusdReserves,\n      btcSentiment,\n      isNegativeFuture,\n      isPositiveFuture,\n    ] = await this._waitEvent(this.swapAI.filters.PredictionResults());\n\n    return {\n      btcPriceCurrent,\n      btcPricePrediction,\n      tusdAssets,\n      tusdReserves,\n      btcSentiment,\n      isNegativeFuture,\n      isPositiveFuture,\n    };\n  }\n}\n\nexport default SwapAIContract;\n","import axios from 'axios';\n\nclass ChainlinkPriceFeedAPI {\n  constructor(contractAddress, decimals) {\n    this.address = contractAddress;\n    this.decimals = decimals;\n\n    this.api = axios.create({\n      baseURL: 'https://market.link/v1/metrics/api/v1/',\n      headers: {\n        accept: 'application/json',\n        // 'Access-Control-Allow-Origin': '*',\n        'Content-Type': 'application/json',\n      },\n    });\n  }\n\n  get query() {\n    return `avg(feeds_latest_answer{feed_address=~\"(?i)${this.address}\", network_id=~\"1|\"}) by (feed_address) / ${10 ** this.decimals}`;\n  }\n\n  async fetchHistoricPrices(range) {\n    const end = Math.floor(Date.now() / 1000);\n    const start = end - range;\n    return this._fetchHistoricPrices(start, end);\n  }\n\n  async fetchHistoricPriceRange(start, end) {\n    return this._fetchHistoricPrices(start, end);\n  }\n\n  async _fetchHistoricPrices(start, end) {\n    const res = await this.api.get('/query_range', {\n      params: {\n        query: this.query,\n        start,\n        end,\n        step: Math.floor((end - start) / 60)\n      }\n    });\n\n    const dataResponse = res.data;\n    const rawData = dataResponse.data.result[0].values;\n    const processedData = rawData.map(([timestamp, price]) => ([timestamp * 1000, price]));\n\n    return processedData;\n  }\n}\n\nexport default ChainlinkPriceFeedAPI;\n","import React, { useState, useEffect } from 'react';\n\nimport { ethers } from 'ethers';\n\nimport Box from '@mui/material/Box';\nimport Stack from '@mui/material/Stack';\nimport Grid from '@mui/material/Grid';\nimport Typography from \"@mui/material/Typography\";\n\nimport PriceFeedChart from './PriceFeedChart';\n\n// import NavigationBar from './NavigationBar';\nimport GenericButton from './GenericButton';\n\nimport NoWalletDetected from './NoWalletDetected';\nimport ConnectWallet from './ConnectWallet';\nimport BlockchainLogsTable from './BlockchainLogsTable';\n\nimport SwapAIContract from '../utils/swapai-contract';\n\nimport ChainlinkPriceFeedAPI from '../utils/ChainlinkPriceFeedAPI';\n\nimport { PRICE_FEED_BTC_ADDRESS, BTC_DECIMALS } from '../utils/constants';\n\n// list of network ids https://docs.metamask.io/guide/ethereum-provider.html#properties\nconst KOVAN_ID = '42';\nconst NETWORK_ERR_MSG = 'Please connect Metamask to Kovan';\n\nfunction App() {\n  const [walletAddress, setWalletAddress] = useState('');\n  // const [txnError, setTxnError] = useState('');\n  const [networkError, setNetworkError] = useState('');\n  const [userRegistered, setUserRegistered] = useState(false);\n  const [optInStatus, setOptInStatus] = useState(false);\n  const [logs, setLogs] = useState([]);\n  const [swapperContract, setSwapperContract] = useState(null);\n\n  const [priceFeedData, setPriceFeedData] = useState([]);\n\n  useEffect(() => {\n    const priceFeedAPI = new ChainlinkPriceFeedAPI(PRICE_FEED_BTC_ADDRESS, BTC_DECIMALS);\n\n    const fetchData = async () => {\n      const data = await priceFeedAPI.fetchHistoricPrices(60 * 60 * 24 * 7);\n      setPriceFeedData(data);\n    };\n\n    fetchData();\n  }, []);\n\n  async function connectWallet() {\n    // Fetch the user's address\n    const [userAddress] = await window.ethereum.request({ method: 'eth_requestAccounts' });\n\n    // Check if the address is on Kovan testnet\n    if (window.ethereum.networkVersion !== KOVAN_ID) {\n      setNetworkError(NETWORK_ERR_MSG);\n      return false;\n    }\n\n    // Save the user's address in our state\n    setWalletAddress(userAddress);\n\n    // Initialize the provider to initialize our contracts\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n\n    // Initialize the swapping contract\n    setSwapperContract(new SwapAIContract(provider));\n\n    // We reinitialize it whenever the user changes their account.\n    window.ethereum.on('accountsChanged', ([newAddress]) => {\n      // `accountsChanged` event can be triggered with an undefined newAddress.\n      // This happens when the user removes the Dapp from the 'Connected\n      // list of sites allowed access to your addresses' (Metamask > Settings > Connections)\n      // To avoid errors, we reset the dapp state\n      if (newAddress === undefined)\n        resetState();\n      else\n        setWalletAddress(newAddress);\n    });\n\n    // We reset the dapp state if the network is changed\n    window.ethereum.on('chainChanged', resetState);\n\n    return true;\n  }\n\n  function resetState() {\n    setWalletAddress('');\n    // setTxnError('');\n    setNetworkError('');\n    setUserRegistered(false);\n    setOptInStatus(false);\n    setLogs([]);\n  }\n\n  //////////////////////////\n  // Contract interaction //\n  //////////////////////////\n\n  async function executeRegisterUser() {\n    const { success, isNewUser } = await swapperContract.registerUser();\n\n    setUserRegistered(success);\n    setLogs([\n      ...logs,\n      [\n        `User registration status: ${success ? 'success' : 'failure'}`,\n        `User account is ${isNewUser ? 'new' : 'existing'}`\n      ].join('\\n')\n    ]);\n  }\n\n  async function executeFetchUserBalance() {\n    const {\n      WBTC: wbtcBalance,\n      TUSD: tusdBalance,\n    } = await swapperContract.fetchUserBalance();\n\n    setLogs([\n      ...logs,\n      [\n        `TUSD Balance: ${tusdBalance}`,\n        `WBTC Balance: ${wbtcBalance}`\n      ].join('\\n')\n    ]);\n  }\n\n  async function executeSetOptInStatus(userOptedIn) {\n    await swapperContract.setOptInStatus(userOptedIn);\n\n    setOptInStatus(userOptedIn);\n    setLogs([\n      ...logs,\n      `User has opted-${userOptedIn ? 'in' : 'out'} for auto-swapping`\n    ]);\n  }\n\n  async function executeDepositTUSD() {\n    const { oldBalance, newBalance } = await swapperContract.depositTUSD(10000);\n\n    setLogs([\n      ...logs,\n      `TUSD Balance: ${oldBalance} -> ${newBalance} balance`,\n    ]);\n  }\n\n  async function executeDepositWBTC() {\n    const { oldBalance, newBalance } = await swapperContract.depositWBTC(10);\n\n    setLogs([\n      ...logs,\n      `WBTC Balance: ${oldBalance} -> ${newBalance} balance`,\n    ]);\n  }\n\n  async function executeManualSwapUserToWBTC() {\n    const {\n      WBTC: wbtcBalance, TUSD: tusdBalance\n    } = await swapperContract.manualSwapUserToWBTC();\n\n    setLogs([\n      ...logs,\n      [\n        `TUSD Balance: ${tusdBalance.old} -> ${tusdBalance.new} balance`,\n        `WBTC Balance: ${wbtcBalance.old} -> ${wbtcBalance.new} balance`,\n      ].join('\\n'),\n    ]);\n  }\n\n  async function executeManualSwapUserToTUSD() {\n    const {\n      WBTC: wbtcBalance, TUSD: tusdBalance\n    } = await swapperContract.manualSwapUserToTUSD();\n\n    setLogs([\n      ...logs,\n      [\n        `TUSD Balance: ${tusdBalance.old} -> ${tusdBalance.new} balance`,\n        `WBTC Balance: ${wbtcBalance.old} -> ${wbtcBalance.new} balance`,\n      ].join('\\n'),\n    ]);\n  }\n\n  async function executeFetchPredictionForecast() {\n    const {\n      btcPriceCurrent,\n      btcPricePrediction,\n      tusdAssets,\n      tusdReserves,\n      btcSentiment,\n      isNegativeFuture,\n      isPositiveFuture,\n    } = await swapperContract.fetchPredictionForecast();\n\n    setLogs([\n      ...logs,\n      [\n        `BTC current price: ${btcPriceCurrent / (10 ** 8)}`,\n        `BTC price in 24 hours: ${btcPricePrediction / (10 ** 8)}`,\n        `TUSD asset:reserve ratio: ${(tusdAssets / tusdReserves).toFixed(2)}`,\n        `BTC 24 hour sentiment: ${(btcSentiment / 100)}%`,\n        `BTC very negative outlook prediction: ${isNegativeFuture}`,\n        `BTC very positive outlook prediction: ${isPositiveFuture}`,\n      ].join('\\n'),\n    ]);\n  }\n\n  // Ethereum wallets inject the window.ethereum object. If it hasn't been\n  // injected, we instruct the user to install MetaMask.\n  if (typeof window.ethereum === 'undefined') {\n    return <NoWalletDetected />;\n  }\n\n  if (!walletAddress) {\n    return (\n      <ConnectWallet\n        connectWallet={() => connectWallet()}\n        networkError={networkError}\n        dismiss={() => setNetworkError('')}\n      />\n    );\n  }\n\n  let optInStatusLabel = (userRegistered && optInStatus) ? 'Out of' : 'In to';\n\n  return (\n    <Box sx={{ flexGrow: 1 }}>\n      <Grid container spacing={2} padding={4} sx={{ width: '100vw', height: '100vh' }}>\n        <Grid item xs={8}>\n          <Box sx={{ height: '100%', pb: 1 }}>\n            <PriceFeedChart data={priceFeedData} height=\"500%\" />\n          </Box>\n        </Grid>\n\n        <Grid item xs={4} padding={1}>\n          <Box sx={{ height: '50%' }}>\n            <Typography variant=\"h5\" component=\"div\">\n              Manage Account\n            </Typography>\n\n            <Stack direction=\"row\">\n              <Grid item xs={6}>\n                <GenericButton\n                  sx={{ width: '100%' }}\n                  onClick={() => executeRegisterUser()}\n                  label='Register Account'\n                />\n              </Grid>\n\n              <Grid item xs={6}>\n                <GenericButton\n                  sx={{ width: '100%' }}\n                  onClick={() => executeSetOptInStatus(!optInStatus)}\n                  /*disabled={!userRegistered}*/\n                  label={`Opt ${optInStatusLabel} auto swapping`}\n                />\n              </Grid>\n            </Stack>\n\n            <Typography variant=\"h5\" component=\"div\">\n              Deposit Funds\n            </Typography>\n\n            <Stack direction=\"row\">\n              <Grid item xs={4}>\n                <GenericButton\n                  sx={{ width: '100%' }}\n                  onClick={() => executeDepositTUSD()}\n                  /*disabled={!userRegistered}*/\n                  label='Deposit TUSD'\n                />\n              </Grid>\n\n              <Grid item xs={4}>\n                <GenericButton\n                  sx={{ width: '100%' }}\n                  onClick={() => executeDepositWBTC()}\n                  /*disabled={!userRegistered}*/\n                  label='Deposit WBTC'\n                />\n              </Grid>\n\n              <Grid item xs={4}>\n                <GenericButton\n                  sx={{ width: '100%' }}\n                  onClick={() => executeFetchUserBalance()}\n                  /*disabled={!userRegistered}*/\n                  label='Refresh Balance'\n                />\n              </Grid>\n            </Stack>\n\n            <Typography variant=\"h5\" component=\"div\">\n              Swap Funds\n            </Typography>\n\n            <Stack direction=\"row\">\n              <Grid item xs={6}>\n                <GenericButton\n                  sx={{ width: '100%' }}\n                  onClick={() => executeManualSwapUserToWBTC()}\n                  /*disabled={!userRegistered}*/\n                  label='Force Swap TUSD -> WBTC'\n                />\n              </Grid>\n\n              <Grid item xs={6}>\n                <GenericButton\n                  sx={{ width: '100%' }}\n                  onClick={() => executeManualSwapUserToTUSD()}\n                  /*disabled={!userRegistered}*/\n                  label='Force Swap WBTC -> TUSD'\n                />\n              </Grid>\n            </Stack>\n\n            <Typography variant=\"h5\" component=\"div\">\n              Debug\n            </Typography>\n\n            <Stack direction=\"row\">\n              <Grid item xs={12}>\n                <GenericButton\n                  sx={{ width: '100%' }}\n                  onClick={() => executeFetchPredictionForecast()}\n                  /*disabled={!userRegistered}*/\n                  label='Fetch Prediction Forecast'\n                />\n              </Grid>\n            </Stack>\n          </Box>\n\n          <Box sx={{ maxHeight: '50%' }}>\n            <BlockchainLogsTable logs={logs} />\n          </Box>\n        </Grid>\n      </Grid>\n    </Box>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App.jsx';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}
{"version":3,"sources":["components/PriceChart.jsx","components/GenericButton.jsx","components/NoWalletDetected.jsx","components/NetworkErrorMessage.jsx","components/ConnectWallet.jsx","components/BlockchainLogsTable.jsx","utils/constants.js","utils/utils.js","utils/swapai-contract.js","components/App.jsx","index.js"],"names":["PriceChart","clientTimezone","Intl","DateTimeFormat","resolvedOptions","timeZone","widgetProps","width","height","symbol","range","timezone","theme","style","locale","toolbar_bg","enable_publishing","hide_top_toolbar","hide_side_toolbar","withdateranges","allow_symbol_change","save_image","React","memo","GenericButton","props","colorStyle","backgroundColor","disabled","color","Box","display","justifyContent","m","Button","variant","size","onClick","sx","label","NoWalletDetected","className","href","target","rel","NetworkErrorMessage","message","dismiss","role","type","ConnectWallet","connectWallet","networkError","position","left","top","transform","BlockchainLogsTable","undefined","logs","TableContainer","component","Paper","Table","TableHead","TableRow","TableCell","TableBody","map","scope","whiteSpace","Math","random","MAX_GAS_LIMIT","TUSD_KOVAN_ADDRESS","contractData","WBTC_KOVAN_ADDRESS","CONTRACT_ADDRESS","ERC20_TOKEN_ABI","SWAPAI_ABI","SwapAIArtifact","abi","waitForEvent","contract","filter","a","Promise","resolve","reject","once","args","BigNum","ethers","BigNumber","SwapAIContract","provider","this","tusdToken","Contract","getSigner","wbtcToken","swapAI","wbtcFactor","from","pow","tusdFactor","rawValue","decimals","formattedValue","utils","formatUnits","commify","userExists","gasLimit","_waitEvent","filters","UserExists","registerUser","RegisterUser","success","isNewUser","fetchUserBalance","UserBalance","tusdBalance","wbtcBalance","_formatCurrency","fetchOptInStatus","OptInStatus","optInStatus","wantedOptInStatus","setOptInStatus","newOptInStatus","depositAmount","_tusdFactor","realAmount","mul","approve","depositTUSD","DepositTUSD","oldBalance","newBalance","_wbtcFactor","depositWBTC","DepositWBTC","manualSwapUserToWBTC","ManualSwap","oldWbtcBalance","newWbtcBalance","oldTusdBalance","newTusdBalance","WBTC","old","new","TUSD","manualSwapUserToTUSD","min","max","ceil","floor","console","log","btcPriceCurrent","getRandomInt","btcPricePrediction","tusdAssets","tusdReserves","btcSentiment","isNegativeFuture","isPositiveFuture","NETWORK_ERR_MSG","App","useState","walletAddress","setWalletAddress","setNetworkError","userRegistered","setUserRegistered","setLogs","swapperContract","setSwapperContract","window","ethereum","request","method","userAddress","networkVersion","providers","Web3Provider","on","newAddress","resetState","join","userOptedIn","fetchPredictionForecast","toFixed","optInStatusLabel","flexGrow","Grid","container","spacing","padding","item","xs","maxHeight","pb","executeRegisterUser","executeSetOptInStatus","executeFetchUserBalance","executeDepositTUSD","executeDepositWBTC","executeManualSwapUserToWBTC","executeManualSwapUserToTUSD","executeFetchPredictionForecast","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8b6eef19.chunk.js","sourcesContent":["import React from 'react';\n\nimport { AdvancedChart } from 'react-tradingview-embed';\n\nfunction PriceChart() {\n  const clientTimezone = Intl.DateTimeFormat().resolvedOptions().timeZone;\n\n  return (\n    <AdvancedChart\n      widgetProps={{\n        width: '100%',\n        height: '100%',\n        // symbol: 'COINBASE:BTCUSD',\n        symbol: 'BINANCE:BTCTUSD',\n        range: '5D',\n        timezone: clientTimezone,\n        theme: 'light',\n        style: '3',\n        locale: 'en',\n        toolbar_bg: '#f1f3f6',\n        enable_publishing: false,\n        hide_top_toolbar: true,\n        hide_side_toolbar: true,\n        withdateranges: true,\n        allow_symbol_change: true,\n        save_image: false\n      }}\n    />\n  );\n}\n\nexport default React.memo(PriceChart);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Button from '@mui/material/Button';\nimport Box from '@mui/material/Box';\n\nfunction GenericButton(props) {\n  const colorStyle = {\n    backgroundColor: (props.disabled) ? '#D3D3D3' : '#12824C',\n    color: '#FFFFFF'\n  }\n\n  return (\n    <Box display='flex' justifyContent='space-between' m={1}>\n      <Button\n        variant='contained'\n        size='medium'\n        style={colorStyle}\n        onClick={props.onClick}\n        disabled={props.disabled}\n        sx={props.sx}\n      >\n        {props.label}\n      </Button>\n    </Box>\n  );\n}\n\nGenericButton.propTypes = {\n  onClick: PropTypes.func.isRequired,\n  label: PropTypes.string.isRequired,\n  disabled: PropTypes.bool,\n};\n\nexport default React.memo(GenericButton);\n","import React from 'react';\n\nfunction NoWalletDetected() {\n  return (\n    <div className='container'>\n      <div className='row justify-content-md-center'>\n        <div className='col-6 p-4 text-center'>\n          <p>\n            No Ethereum wallet was detected. <br />\n            Please install{' '}\n            <a\n              href='http://metamask.io'\n              target='_blank'\n              rel='noopener noreferrer'\n            >\n              MetaMask\n            </a>\n            .\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default React.memo(NoWalletDetected);\n","/* eslint-disable react/prop-types */\nimport React from 'react';\n\nfunction NetworkErrorMessage({ message, dismiss }) {\n  return (\n    <div className='alert alert-danger' role='alert'>\n      {message}\n      <button\n        type='button'\n        className='close'\n        data-dismiss='alert'\n        aria-label='Close'\n        onClick={dismiss}\n      >\n        <span aria-hidden='true'>&times;</span>\n      </button>\n    </div>\n  );\n}\n\nexport default React.memo(NetworkErrorMessage);\n","/* eslint-disable react/prop-types */\nimport React from 'react';\n\nimport NetworkErrorMessage from './NetworkErrorMessage';\nimport GenericButton from './GenericButton';\n\nfunction ConnectWallet({ connectWallet, networkError, dismiss }) {\n  return (\n    <div className='container'\n      style={{\n        position: 'absolute',\n        left: '50%',\n        top: '50%',\n        transform: 'translate(-50%, -50%)',\n        display: 'inline-block',\n      }}\n    >\n      <div className='row justify-content-md-center'>\n        <div className='col-12 text-center'>\n          {networkError && (\n            <NetworkErrorMessage \n              message={networkError} \n              dismiss={dismiss} \n            />\n          )}\n        </div>\n        <div className='col-6 p-4 text-center'>\n          <p>Please connect to your wallet.</p>\n          <GenericButton\n            className='btn btn-warning'\n            type='button'\n            onClick={connectWallet}\n            label='Connect Wallet'\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default React.memo(ConnectWallet);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableHead from '@mui/material/TableHead';\nimport TableRow from '@mui/material/TableRow';\nimport Paper from '@mui/material/Paper';\n\nfunction BlockchainLogsTable(props) {\n  if (props.logs === undefined)\n    props.logs = [];\n\n  return (\n    <TableContainer component={Paper}>\n      <Table aria-label='simple table'>\n        <TableHead>\n          <TableRow>\n            <TableCell>Blockchain Logs</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {props.logs.map((message) => (\n            <TableRow key={message+Math.random()}>\n              <TableCell component='th' scope='row' sx={{whiteSpace: 'pre'}}>\n                {message}\n              </TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n}\n\nBlockchainLogsTable.propTypes = {\n  logs: PropTypes.array\n}\n\nexport default React.memo(BlockchainLogsTable);\n","import contractData from '../contracts/contract-addresses.json';\nimport SwapAIArtifact from '../contracts/SwapAI.json';\n\nconst MAX_GAS_LIMIT = 250_000;\n\nconst TUSD_KOVAN_ADDRESS = contractData['TUSDToken'];\nconst WBTC_KOVAN_ADDRESS = contractData['WBTCToken'];\nconst CONTRACT_ADDRESS   = contractData['SwapAI'];\n\nconst ERC20_TOKEN_ABI = [\n  'function approve(address spender, uint256 amount) external returns (bool)',\n  'function decimals() public returns (uint8)',\n];\n\nconst SWAPAI_ABI = SwapAIArtifact.abi;\n\nexport {\n  MAX_GAS_LIMIT,\n  TUSD_KOVAN_ADDRESS, WBTC_KOVAN_ADDRESS, CONTRACT_ADDRESS,\n  ERC20_TOKEN_ABI, SWAPAI_ABI,\n}\n","async function waitForEvent(contract, filter) {\n  return new Promise((resolve, reject) => {\n    contract.once(filter, function(...args) {\n      resolve(args);\n    });\n  });\n}\n\nexport { waitForEvent };\n","import { ethers } from 'ethers';\nimport {\n  MAX_GAS_LIMIT,\n  TUSD_KOVAN_ADDRESS,\n  WBTC_KOVAN_ADDRESS,\n  CONTRACT_ADDRESS,\n  ERC20_TOKEN_ABI,\n  SWAPAI_ABI,\n} from './constants';\n\nimport { waitForEvent } from './utils';\n\nconst BigNum = ethers.BigNumber;\n\nclass SwapAIContract {\n  constructor(provider) {\n    this.provider = provider;\n\n    this.tusdToken = new ethers.Contract(\n      TUSD_KOVAN_ADDRESS,\n      ERC20_TOKEN_ABI,\n      provider.getSigner(0),\n    );\n\n\n    this.wbtcToken = new ethers.Contract(\n      WBTC_KOVAN_ADDRESS,\n      ERC20_TOKEN_ABI,\n      provider.getSigner(0),\n    );\n\n    this.swapAI = new ethers.Contract(\n      CONTRACT_ADDRESS,\n      SWAPAI_ABI,\n      provider.getSigner(0),\n    );\n\n    this.swapAI = new ethers.Contract(\n      CONTRACT_ADDRESS,\n      SWAPAI_ABI,\n      provider.getSigner(0),\n    );\n  }\n\n  async _waitEvent(filter) {\n    return await waitForEvent(this.swapAI, filter);\n  }\n\n  async _wbtcFactor() {\n    // TODO: Fetch decimals dynamically somehow\n    const wbtcDecimals = 8; //await this.wbtcToken.decimals();\n    const wbtcFactor = BigNum.from(10).pow(BigNum.from(wbtcDecimals));\n    return wbtcFactor;\n  }\n\n  async _tusdFactor() {\n    // TODO: Fetch decimals dynamically somehow\n    const tusdDecimals = 18; //await this.tusdToken.decimals();\n    const tusdFactor = BigNum.from(10).pow(BigNum.from(tusdDecimals));\n    return tusdFactor;\n  }\n\n  _formatCurrency(rawValue, decimals) {\n    const formattedValue = ethers.utils.formatUnits(rawValue, decimals);\n    const prettyValue = ethers.utils.commify(formattedValue);\n    return prettyValue;\n  }\n\n  ///////////////////////////\n  // User register / login //\n  ///////////////////////////\n\n  async userExists() {\n    await this.swapAI.userExists({ gasLimit: MAX_GAS_LIMIT });\n    const [userExists] = await this._waitEvent(this.swapAI.filters.UserExists());\n\n    return userExists;\n  }\n\n  async registerUser() {\n    await this.swapAI.registerUser({ gasLimit: MAX_GAS_LIMIT });\n    const [success, isNewUser] = await this._waitEvent(this.swapAI.filters.RegisterUser());\n\n    return { success, isNewUser };\n  }\n\n  /////////////////////\n  // User attributes //\n  /////////////////////\n\n  async fetchUserBalance() {\n    await this.swapAI.fetchUserBalance({ gasLimit: MAX_GAS_LIMIT });\n    const [tusdBalance, wbtcBalance] = await this._waitEvent(this.swapAI.filters.UserBalance());\n\n    return {\n      'WBTC': this._formatCurrency(BigNum.from(wbtcBalance), 8),\n      'TUSD': this._formatCurrency(BigNum.from(tusdBalance), 18),\n    };\n  }\n\n  async fetchOptInStatus() {\n    await this.swapAI.fetchOptInStatus({ gasLimit: MAX_GAS_LIMIT });\n    const [optInStatus] = await this._waitEvent(this.swapAI.filters.OptInStatus());\n\n    return optInStatus;\n  }\n\n  /////////////////////\n  // User management //\n  /////////////////////\n\n  async setOptInStatus(wantedOptInStatus) {\n    await this.swapAI.setOptInStatus(wantedOptInStatus, { gasLimit: MAX_GAS_LIMIT });\n    const [newOptInStatus] = await this._waitEvent(this.swapAI.filters.OptInStatus());\n\n    return newOptInStatus;\n  }\n\n  ////////////////////////\n  // Balance depositing //\n  ////////////////////////\n\n  async depositTUSD(depositAmount) {\n    // First approve the contract to spend the TUSD on your behalf\n    const realAmount = BigNum.from(depositAmount).mul(await this._tusdFactor());\n    await this.tusdToken.approve(CONTRACT_ADDRESS, realAmount);\n\n    // Then deposit that much TUSD into the contract\n    await this.swapAI.depositTUSD(realAmount, { gasLimit: MAX_GAS_LIMIT });\n    const [oldBalance, newBalance] = await this._waitEvent(this.swapAI.filters.DepositTUSD());\n\n    return {\n      oldBalance: this._formatCurrency(BigNum.from(oldBalance), 18),\n      newBalance: this._formatCurrency(BigNum.from(newBalance), 18),\n    };\n  }\n\n  async depositWBTC(depositAmount) {\n    // First approve the contract to spend the WBTC on your behalf\n    const realAmount = BigNum.from(depositAmount).mul(await this._wbtcFactor());\n    await this.wbtcToken.approve(CONTRACT_ADDRESS, realAmount);\n\n    // Then deposit that much WBTC into the contract\n    await this.swapAI.depositWBTC(realAmount, { gasLimit: MAX_GAS_LIMIT });\n    const [oldBalance, newBalance] = await this._waitEvent(this.swapAI.filters.DepositWBTC());\n\n    return {\n      oldBalance: this._formatCurrency(BigNum.from(oldBalance), 8),\n      newBalance: this._formatCurrency(BigNum.from(newBalance), 8),\n    };\n  }\n\n  /////////////////////////////\n  // Manual balance swapping //\n  /////////////////////////////\n\n  async manualSwapUserToWBTC() {\n    await this.swapAI.manualSwapUserToWBTC({ gasLimit: MAX_GAS_LIMIT * 10 });\n\n    const [\n      oldWbtcBalance, newWbtcBalance,\n      oldTusdBalance, newTusdBalance,\n    ] = await this._waitEvent(this.swapAI.filters.ManualSwap());\n\n    return {\n      WBTC: {\n        old: this._formatCurrency(BigNum.from(oldWbtcBalance), 8),\n        new: this._formatCurrency(BigNum.from(newWbtcBalance), 8),\n      },\n      TUSD: {\n        old: this._formatCurrency(BigNum.from(oldTusdBalance), 18),\n        new: this._formatCurrency(BigNum.from(newTusdBalance), 18),\n      },\n    }\n  }\n\n  async manualSwapUserToTUSD() {\n    await this.swapAI.manualSwapUserToTUSD({ gasLimit: MAX_GAS_LIMIT * 10 });\n\n    const [\n      oldWbtcBalance, newWbtcBalance,\n      oldTusdBalance, newTusdBalance,\n    ] = await this._waitEvent(this.swapAI.filters.ManualSwap());\n\n    return {\n      WBTC: {\n        old: this._formatCurrency(BigNum.from(oldWbtcBalance), 8),\n        new: this._formatCurrency(BigNum.from(newWbtcBalance), 8),\n      },\n      TUSD: {\n        old: this._formatCurrency(BigNum.from(oldTusdBalance), 18),\n        new: this._formatCurrency(BigNum.from(newTusdBalance), 18),\n      },\n    }\n  }\n\n  ////////////////////////////\n  // Prediction forecasting //\n  ////////////////////////////\n\n  getRandomInt(min, max) {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n  }\n\n  async fetchPredictionForecast() {\n    // const lol_filter = {\n    //     address: '0x0F1fF3184E06b9D8D983a54562c754a6108e202E',\n    //     topics: [\n    //       ethers.utils.id(\"PredictionResults(uint, uint, uint, uint, int, bool, bool\")\n    //     ]\n    // }\n\n    // this.provider.on(lol_filter, (log, event) => {\n    //   console.log(\"LOL get rekt noob\");\n    //   console.log(log);\n    //   console.log(event);\n    // });\n\n    // this.swapAI.on(lol_filter, (log, event) => {\n    //   console.log(\"LOL get rekt noob\");\n    //   console.log(log);\n    //   console.log(event);\n    // })\n\n    // console.log('testing...');\n\n    // const tx = await this.swapAI.fetchPredictionForecast({ gasLimit: MAX_GAS_LIMIT * 10 });\n    // console.log('waiting for tx to be mined...');\n    // const txwait = await tx.wait();\n    // console.log('tx events:', txwait.events);\n    // console.log(await this.swapAI.queryFilter(this.swapAI.filters.PredictionResults()));\n\n    // console.log('waiting for prediction...');\n\n    // setTimeout(async () => {\n    //   const events = await this.swapAI.queryFilter(this.swapAI.filters.PredictionResults());\n    //   console.log('GOT EVENTS BRO 1');\n    //   console.log(events);\n    // }, 1000 * 10);\n\n    // setTimeout(async () => {\n    //   const events = await this.swapAI.queryFilter(this.swapAI.filters.PredictionResults());\n    //   console.log('GOT EVENTS BRO 2');\n    //   console.log(events);\n    // }, 1000 * 20);\n\n    // setTimeout(async () => {\n    //   const events = await this.swapAI.queryFilter(this.swapAI.filters.PredictionResults());\n    //   console.log('GOT EVENTS BRO 3');\n    //   console.log(events);\n    // }, 1000 * 30);\n\n    // setTimeout(async () => {\n    //   const events = await this.swapAI.queryFilter(this.swapAI.filters.PredictionResults());\n    //   console.log('GOT EVENTS BRO 4');\n    //   console.log(events);\n    // }, 1000 * 40);\n\n    // const [\n    //   btcPriceCurrent,\n    //   btcPricePrediction,\n    //   tusdAssets,\n    //   tusdReserves,\n    //   btcSentiment,\n    //   isNegativeFuture,\n    //   isPositiveFuture,\n    // ] = await this._waitEvent(this.swapAI.filters.PredictionResults());\n\n    console.log('got something!!!!');\n\n    return {\n      btcPriceCurrent: this.getRandomInt(56000 * 10 ** 8, 58000 * 10 ** 8),\n      btcPricePrediction: this.getRandomInt(53000 * 10 ** 8, 62000 * 10 ** 8),\n      tusdAssets: this.getRandomInt(10**17 + 0 * 10**16, 10**17 + 2 * 10**16),\n      tusdReserves: this.getRandomInt(10**17 + 0 * 10**16, 10**17 + 2 * 10**16),\n      btcSentiment: this.getRandomInt(-10000, 10000),\n      isNegativeFuture: false,\n      isPositiveFuture: false,\n    };\n  }\n}\n\nexport default SwapAIContract;\n","import React, { useState } from 'react';\n\nimport { ethers } from 'ethers';\n\nimport Grid from '@mui/material/Grid';\nimport Box from '@mui/material/Box';\n\nimport PriceChart from './PriceChart';\n\n// import NavigationBar from './NavigationBar';\nimport GenericButton from './GenericButton';\n\nimport NoWalletDetected from './NoWalletDetected';\nimport ConnectWallet from './ConnectWallet';\nimport BlockchainLogsTable from './BlockchainLogsTable';\n\nimport SwapAIContract from '../utils/swapai-contract';\n\n// list of network ids https://docs.metamask.io/guide/ethereum-provider.html#properties\nconst KOVAN_ID = '42';\nconst NETWORK_ERR_MSG = 'Please connect Metamask to Kovan';\n\nfunction App() {\n  const [walletAddress, setWalletAddress] = useState('');\n  // const [txnError, setTxnError] = useState('');\n  const [networkError, setNetworkError] = useState('');\n  const [userRegistered, setUserRegistered] = useState(false);\n  const [optInStatus, setOptInStatus] = useState(false);\n  const [logs, setLogs] = useState([]);\n  const [swapperContract, setSwapperContract] = useState(null);\n\n  async function connectWallet() {\n    // Fetch the user's address\n    const [userAddress] = await window.ethereum.request({ method: 'eth_requestAccounts' });\n\n    // Check if the address is on Kovan testnet\n    if (window.ethereum.networkVersion !== KOVAN_ID) {\n      setNetworkError(NETWORK_ERR_MSG);\n      return false;\n    }\n\n    // Save the user's address in our state\n    setWalletAddress(userAddress);\n\n    // Initialize the provider to initialize our contracts\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n\n    // Initialize the swapping contract\n    setSwapperContract(new SwapAIContract(provider));\n\n    // We reinitialize it whenever the user changes their account.\n    window.ethereum.on('accountsChanged', ([newAddress]) => {\n      // `accountsChanged` event can be triggered with an undefined newAddress.\n      // This happens when the user removes the Dapp from the 'Connected\n      // list of sites allowed access to your addresses' (Metamask > Settings > Connections)\n      // To avoid errors, we reset the dapp state\n      if (newAddress === undefined)\n        resetState();\n      else\n        setWalletAddress(newAddress);\n    });\n\n    // We reset the dapp state if the network is changed\n    window.ethereum.on('chainChanged', resetState);\n\n    return true;\n  }\n\n  function resetState() {\n    setWalletAddress('');\n    // setTxnError('');\n    setNetworkError('');\n    setUserRegistered(false);\n    setOptInStatus(false);\n    setLogs([]);\n  }\n\n  //////////////////////////\n  // Contract interaction //\n  //////////////////////////\n\n  async function executeRegisterUser() {\n    const { success, isNewUser } = await swapperContract.registerUser();\n\n    setUserRegistered(success);\n    setLogs([\n      ...logs,\n      [\n        `User registration status: ${success ? 'success' : 'failure'}`,\n        `User account is ${isNewUser ? 'new' : 'existing'}`\n      ].join('\\n')\n    ]);\n  }\n\n  async function executeFetchUserBalance() {\n    const {\n      WBTC: wbtcBalance,\n      TUSD: tusdBalance,\n    } = await swapperContract.fetchUserBalance();\n\n    setLogs([\n      ...logs,\n      [\n        `TUSD Balance: ${tusdBalance}`,\n        `WBTC Balance: ${wbtcBalance}`\n      ].join('\\n')\n    ]);\n  }\n\n  async function executeSetOptInStatus(userOptedIn) {\n    await swapperContract.setOptInStatus(userOptedIn);\n\n    setOptInStatus(userOptedIn);\n    setLogs([\n      ...logs,\n      `User has opted-${userOptedIn ? 'in' : 'out'} for auto-swapping`\n    ]);\n  }\n\n  async function executeDepositTUSD() {\n    const { oldBalance, newBalance } = await swapperContract.depositTUSD(10000);\n\n    setLogs([\n      ...logs,\n      `TUSD Balance: ${oldBalance} -> ${newBalance} balance`,\n    ]);\n  }\n\n  async function executeDepositWBTC() {\n    const { oldBalance, newBalance } = await swapperContract.depositWBTC(10);\n\n    setLogs([\n      ...logs,\n      `WBTC Balance: ${oldBalance} -> ${newBalance} balance`,\n    ]);\n  }\n\n  async function executeManualSwapUserToWBTC() {\n    const {\n      WBTC: wbtcBalance, TUSD: tusdBalance\n    } = await swapperContract.manualSwapUserToWBTC();\n\n    setLogs([\n      ...logs,\n      [\n        `TUSD Balance: ${tusdBalance.old} -> ${tusdBalance.new} balance`,\n        `WBTC Balance: ${wbtcBalance.old} -> ${wbtcBalance.new} balance`,\n      ].join('\\n'),\n    ]);\n  }\n\n  async function executeManualSwapUserToTUSD() {\n    const {\n      WBTC: wbtcBalance, TUSD: tusdBalance\n    } = await swapperContract.manualSwapUserToTUSD();\n\n    setLogs([\n      ...logs,\n      [\n        `TUSD Balance: ${tusdBalance.old} -> ${tusdBalance.new} balance`,\n        `WBTC Balance: ${wbtcBalance.old} -> ${wbtcBalance.new} balance`,\n      ].join('\\n'),\n    ]);\n  }\n\n  async function executeFetchPredictionForecast() {\n    const {\n      btcPriceCurrent,\n      btcPricePrediction,\n      tusdAssets,\n      tusdReserves,\n      btcSentiment,\n      isNegativeFuture,\n      isPositiveFuture,\n    } = await swapperContract.fetchPredictionForecast();\n\n    setLogs([\n      ...logs,\n      [\n        `BTC current price: ${btcPriceCurrent / (10 ** 8)}`,\n        `BTC price in 24 hours: ${btcPricePrediction / (10 ** 8)}`,\n        `TUSD asset:reserve ratio: ${(tusdAssets / tusdReserves).toFixed(2)}`,\n        `BTC 24 hour sentiment: ${(btcSentiment / 100)}%`,\n        `BTC very negative outlook prediction: ${isNegativeFuture}`,\n        `BTC very positive outlook prediction: ${isPositiveFuture}`,\n      ].join('\\n'),\n    ]);\n  }\n\n  // Ethereum wallets inject the window.ethereum object. If it hasn't been\n  // injected, we instruct the user to install MetaMask.\n  if (typeof window.ethereum === 'undefined') {\n    return <NoWalletDetected />;\n  }\n\n  if (!walletAddress) {\n    return (\n      <ConnectWallet\n        connectWallet={() => connectWallet()}\n        networkError={networkError}\n        dismiss={() => setNetworkError('')}\n      />\n    );\n  }\n\n  let optInStatusLabel = (userRegistered && optInStatus) ? 'Out of' : 'In to';\n\n  return (\n    <Box sx={{ flexGrow: 1 }}>\n      <Grid container spacing={2} padding={4} sx={{ width: '100vw', height: '100vh' }}>\n        <Grid item xs={8}>\n          {/*<Stack>\n            <GenericButton\n              sx={{ width: '100%' }}\n              label='Register Account'\n            />\n          </Stack>*/}\n\n          <Box sx={{ maxHeight: '640px', pb: 1 }}>\n            <PriceChart />\n          </Box>\n\n          <Box sx={{ maxHeight: '30%' }}>\n            <BlockchainLogsTable logs={logs} />\n          </Box>\n        </Grid>\n\n        <Grid item xs={4} padding={1}>\n          <Grid item xs={12}>\n            <GenericButton\n              sx={{ width: '100%' }}\n              onClick={() => executeRegisterUser()}\n              label='Register Account'\n            />\n          </Grid>\n\n          <Grid item xs={12}>\n            <GenericButton\n              sx={{ width: '100%' }}\n              onClick={() => executeSetOptInStatus(!optInStatus)}\n              /*disabled={!userRegistered}*/\n              label={`Opt ${optInStatusLabel} automatic swapping`}\n            />\n          </Grid>\n\n          <Grid item xs={12}>\n            <GenericButton\n              sx={{ width: '100%' }}\n              onClick={() => executeFetchUserBalance()}\n              /*disabled={!userRegistered}*/\n              label='Refresh Balance'\n            />\n          </Grid>\n\n          <Grid item xs={12}>\n            <GenericButton\n              sx={{ width: '100%' }}\n              onClick={() => executeDepositTUSD()}\n              /*disabled={!userRegistered}*/\n              label='Deposit TUSD'\n            />\n          </Grid>\n\n          <Grid item xs={12}>\n            <GenericButton\n              sx={{ width: '100%' }}\n              onClick={() => executeDepositWBTC()}\n              /*disabled={!userRegistered}*/\n              label='Deposit WBTC'\n            />\n          </Grid>\n\n          <Grid item xs={12}>\n            <GenericButton\n              sx={{ width: '100%' }}\n              onClick={() => executeManualSwapUserToWBTC()}\n              /*disabled={!userRegistered}*/\n              label='Force Swap TUSD -> WBTC'\n            />\n          </Grid>\n\n          <Grid item xs={12}>\n            <GenericButton\n              sx={{ width: '100%' }}\n              onClick={() => executeManualSwapUserToTUSD()}\n              /*disabled={!userRegistered}*/\n              label='Force Swap WBTC -> TUSD'\n            />\n          </Grid>\n\n          <Grid item xs={12}>\n            <GenericButton\n              sx={{ width: '100%' }}\n              onClick={() => executeFetchPredictionForecast()}\n              /*disabled={!userRegistered}*/\n              label='Fetch Prediction Forecast'\n            />\n          </Grid>\n        </Grid>\n      </Grid>\n    </Box>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App.jsx';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}